Node js lessons


#1-dars. NodeJS nima

Node JS nima ?

- Node.js ochiq manbali server muhitidir.
- Node.js bepul
- Node.js turli platformalarda ishlaydi (windows, linux, unix, mac os va boshqalar)
- Node.js serverda Javascriptdan foydalanadi

Nima uchun Node.js ?

- Node.js asinxron dasturlashdan foydalaniladi!

Veb-server uchun umumiy vazifa serverda faylni ochish va kontentni mijozga qaytarish bo'ladi.

PHP yoki ASP fayl so'rovini qanday ko'rib chiqadi:
  
  1. Vazifani kompyuterning fayl tizimiga yuboradi.
  2. Fayl tizimi ochilguncha kutadi va faylni o'qiydi.
  3. Kontentni mijozga qaytaradi.
  4. Keyingi so'rovni ko'rib chiqishga tayyor.

Node.js fayl so'rovini qanday ko'rib chiqadi:

  1. Vazifani kompyuterning fayl tizimiga yuboradi.
  2. Keyingi so'rovni ko'rib chiqishga tayyor.
  3. Fayl tizimi faylni ochib, o'qiganda, server tarkibni mijozga qaytaradi.

  Node.js kutishni yo'q qiladi va keyingi so'rov bilan davom etadi.

  Node.js bir torli, bloklanmaydigan, asinxron dasturlashni amalga oshiradi, bu juda samarali xotira.

  Node.js nima qila oladi ?

    - Node.js dinamik sahifa mazmunini yaratishi mumkin.
    - Node.js serverdagi fayllarni yaratishi, ochishi, o'qishi, yozishi, o'chirishi va yopishi mumkin.
    - Node.js forma ma'lumotlarni to'plashi mumkin.
    - Node.js ma'lumotlar bazasiga ma'lumotlarni qo'shishi, o'chirishi va o'zgartirishi mumkin.



#2-dars. NodeJS ni yuklab olish.

https://nodejs.org/en

buffer - rasm, videolarni razmerini kichraytirish uchun ishlatiladi. (tekshirib ko'rish kerak)

NodeJS ni ichidagi ozining kutubxonalaridan foydalansa bo'ladi. nodejs.org -> saytga kirib tekshirib ko'ring.


#3-dars. VSCode - code editor.

#4-dars. Node terminalda ishlash.

#5-dars. Node Package Manager (npm).

// npm -v
// npm init
// package name: (app)
// version: (1.0.0)
// description: NodeJS starter lesson
// entry point: (index.js)
// test command:
// git repository:
// keywords: nodejs
// author: Azimjon King
// license: (ISC)
//
//
Is this OK? (yes)


dependencies and devDependencies

   // dependencies va devDependencies — Node.js loyihasidagi ikkita asosiy tushuncha bo'lib, ular turli xil kutubxonalarni boshqarishda muhim ahamiyatga ega. Farqi shundaki, ular loyihangizning ishlash va ishlab chiqish bosqichida qanday ishlatilishini aniqlaydi. Quyida batafsil tushuntiraman:

   1. dependencies

    Bu bo‘limda loyihaning ishlash vaqti (runtime) da zarur bo‘lgan paketlar saqlanadi. Ya'ni, foydalanuvchi dasturingizni ishlatishi uchun kerak bo'ladigan kutubxonalar shu yerda turadi.

    Misol:
      Web-serverda ishlatish uchun express paketi.
      Ma'lumotlar bazasiga ulanish uchun mongoose.

    Qo'shish usuli:
      npm install express

    Qachon ishlatiladi?
      Loyihani production (ishchi muhit) ga tayyorlashda.
      Foydalanuvchilar dasturingizni ishga tushirayotgan paytda.

    2. devDependencies

    Bu bo‘limda ishlab chiqish bosqichida zarur bo‘lgan kutubxonalar saqlanadi. Loyiha productionga ketganda, bu paketlar kerak bo‘lmaydi.

    Misol:
      Kod sifatini tekshirish uchun: eslint.
      Test yozish uchun: jest.
      CSS va JavaScript'ni optimallashtirish uchun: vite.

    Qo'shish usuli:
      npm install --save-dev eslint

    Qachon ishlatiladi?
      Kodni ishlab chiqayotganingizda.
      Testlar yozayotganingizda yoki kod formatini nazorat qilayotganingizda.

    Xulosa
      dependencies: Production muhitida ham ishlaydigan paketlar.
      devDependencies: Faqat ishlab chiqish va test qilishda kerak bo'ladigan paketlar.

    Bonus Maslahat: Agar loyihani production muhitga yuklayotgan bo'lsangiz, faqat dependencies paketlarni yuklash uchun:
      npm install --production  (tekshirib ko'rish kerak)


#6-dars. Global object va module.



console.log("Hello world", __dirname);
console.log("Hello world", __filename)

Node.js-da __dirname va __filename maxsus o‘zgaruvchilar bo‘lib, ular bajarilayotgan skriptning joriy katalogi va fayl yo‘lini ko‘rsatadi. Ular qanday ishlashini quyida ko‘rib chiqamiz:

  1. __dirname
    Ushbu o‘zgaruvchi joriy fayl joylashgan papkaning to‘liq (absolyut) yo‘lini qaytaradi.

    console.log(__dirname);
    /Users/yourname/project

  2. __filename
    Ushbu o‘zgaruvchi joriy bajarilayotgan faylning to‘liq (absolyut) yo‘lini qaytaradi.

    console.log(__filename);
    /Users/yourname/project/index.js



// export default  and exports.module difference

  module.exports va export default ikkalasi ham JavaScript modullari bilan ishlashda qiymatlarni eksport qilish uchun ishlatiladi. Ammo ular orasida Node.js va ESM (ECMAScript Module) standartlariga bog‘liq ba'zi farqlar mavjud. Keling, ularning farqini batafsil ko‘rib chiqamiz.


  1. module.exports – CommonJS moduli
    Bu Node.js-ning CommonJS formatida modullarni eksport qilish usuli.
    Node.js-da require bilan import qilinadi.

  2. export default – ESM moduli
    Bu ES6 (ESM) modullari uchun mo‘ljallangan va hozirda zamonaviy JavaScript (shu jumladan brauzerlar va Node.js) tomonidan qo‘llab-quvvatlanadi.
    Import qilishda import kalit so‘zi ishlatiladi.

    Farqlar:

    module.exports (CommonJS)
      - Node.js-ning standart modul tizimi.	
      - require orqali import qilinadi.	
      - Fayl kengaytmasi majburiy emas.	
      - Asosan Node.js uchun ishlatiladi.	
      - Senkron ishlaydi.	

    export default (ESM)
      - ESM (standartga mos) modul tizimi.
      - import orqali import qilinadi.
      - Fayl kengaytmasi odatda .js yoki .mjs.
      - Zamonaviy JavaScript va brauzerda ishlatiladi.
      - Asinxron bo‘lishi mumkin.

Qaysi birini ishlatish kerak?

  CommonJS (module.exports): Agar loyihangiz Node.js yoki eski kodlar bilan ishlasa, bu format qulay bo‘ladi.

  ESM (export default): Agar zamonaviy JavaScript yoki brauzerlar bilan ishlayotgan bo‘lsangiz, ES6 modullarini ishlatish tavsiya qilinadi. Node.js-ning so‘nggi versiyalari ham ESM-ni qo‘llab-quvvatlaydi.



#7-dars. Module Path.

1. path.join([...paths])

  Bu funksiya bir nechta qismdan iborat yo‘lni to‘g‘ri formatda birlashtiradi. OS platformalariga mos keladigan yo‘llarni yaratishda foydali.

  Misol:

  const path = require('path');
  const result = path.join('folder', 'subfolder', 'file.txt');
  console.log(result);  // 'folder/subfolder/file.txt'

  - path.join() avtomatik ravishda yo‘l ajratuvchilarni (/ yoki \) to‘g‘ri qo‘llaydi.

  2. path.resolve([...paths])

  Bu funksiya berilgan qismlar asosida absolyut yo‘l yaratadi. Agar qism nisbiy bo‘lsa, u joriy katalogdan boshlanadi.

  Misol:

  const result = path.resolve('folder', 'file.txt');
  console.log(result);  // '/Users/user/project/folder/file.txt' (platformaga qarab o‘zgaradi)


  - path.resolve() birinchi topilgan absolyut qismdan yo‘l yaratishni boshlaydi.
  - Agar absolyut yo‘l berilmagan bo‘lsa, u process.cwd() (joriy ishchi katalog) dan foydalanadi.

  3. path.basename(path[, ext])
  
  Bu funksiya yo‘lning fayl nomini qaytaradi. Agar ikkinchi parametr sifatida kengaytma (ext) berilsa, u olib tashlanadi.

  Misol:

  const fileName = path.basename('/folder/subfolder/file.txt');
  console.log(fileName);  // 'file.txt'

  Kengaytmasiz olish:

  const fileName = path.basename('/folder/subfolder/file.txt', '.txt');
  console.log(fileName);  // 'file'

  4. path.dirname(path)
  
  Berilgan yo‘lning faqat papka qismini qaytaradi.

  Misol:

  const dirName = path.dirname('/folder/subfolder/file.txt');
  console.log(dirName);  // '/folder/subfolder'


  5. path.extname(path)

  Faylning kengaytmasini qaytaradi. Agar faylda kengaytma bo‘lmasa, bo‘sh qiymat ('') qaytariladi.

  Misol:

  const extension = path.extname('index.html');
  console.log(extension);  // '.html'

  Kengaytmasiz fayl:

  const noExt = path.extname('README');
  console.log(noExt);  // ''


  6. path.normalize(path)
  
  Noto‘g‘ri yozilgan yoki chalkash yo‘llarni to‘g‘rilaydi.

  Misol:

  const normalizedPath = path.normalize('folder//subfolder/../file.txt');
  console.log(normalizedPath);  // 'folder/file.txt'

  .. katalogning bir qadam yuqoriga ko‘tarilishini bildiradi va path.normalize() buni hisobga oladi.


  7. path.isAbsolute(path)
  
  Yo‘lning absolyut yo‘l ekanligini tekshiradi (true yoki false qaytaradi).
  Bu funksiya berilgan yo‘lning absolyut ekanini tekshiradi. Absolyut yo‘l — bu to‘liq yo‘l bo‘lib, u kompyuteringizning asosiy katalogidan (masalan, UNIX tizimlarda /, Windows’da C:\) boshlanadi.

  Misol:

  console.log(path.isAbsolute('/folder/file.txt'));  // true
  console.log(path.isAbsolute('folder/file.txt'));   // false


  const path = require('path');

  console.log(path.isAbsolute('/folder/file.txt'));  // true  (UNIX)
  console.log(path.isAbsolute('folder/file.txt'));   // false (nisbiy yo‘l)
  console.log(path.isAbsolute('C:\\folder\\file.txt'));  // true (Windows)
  console.log(path.isAbsolute('folder\\file.txt'));      // false

  Izoh:

  - Absolyut yo‘l kompyuteringizning aniq bir joyiga to‘liq manzil beradi.
  - Nisbiy yo‘l esa joriy ishchi katalogga (masalan, loyihaning papkasiga) bog‘liq bo‘lib ishlaydi.


  8. path.relative(from, to)
  
  Ikkita yo‘l o‘rtasidagi nisbiy yo‘lni hisoblaydi.

  Misol:

  const relPath = path.relative('/folder/subfolder', '/folder/file.txt');
  console.log(relPath);  // '../file.txt'

  Tushuntirish:

    from: Biz boshlamoqchi bo‘lgan papka — /folder/subfolder.
    to: Yetib borishimiz kerak bo‘lgan fayl — /folder/file.txt.
    Natija: '../file.txt' – bu shuni anglatadiki, from papkasidan chiqish uchun bitta qadam yuqoriga (..) chiqamiz, keyin file.txt fayliga kiramiz.

  Yana bir Misol:

  const from = '/home/user/documents';
  const to = '/home/user/photos/vacation.jpg';

  const relativePath = path.relative(from, to);
  console.log(relativePath);  // '../photos/vacation.jpg'


  Tushuntirish:

    from: /home/user/documents (boshlash joyi).
    to: /home/user/photos/vacation.jpg (borish joyi).
    Natija: '../photos/vacation.jpg' — birinchi katalogdan yuqoriga ko‘tarilib (..), so‘ng photos katalogiga kiramiz va vacation.jpg faylini topamiz.



  9. path.parse(path)
  
  Yo‘lni obyekt shaklida ajratadi (root, dir, base, ext, name).

  Misol:

  const parsed = path.parse('/folder/subfolder/file.txt');
  console.log(parsed);

  Natija: 

  {
    root: "/",
    dir: "/folder/subfolder",
    base: "file.txt",
    ext: ".txt",
    name: "file"
  }


  10. path.format(pathObject)

  Obyekt shaklidagi yo‘lni qayta birlashtiradi.

  Misol:

  const pathObject = {
    dir: '/folder/subfolder',
    base: 'file.txt'
  };
  const formatted = path.format(pathObject);
  console.log(formatted);  // '/folder/subfolder/file.txt'



#8-dars. Module File System. FS.


Node.js'dagi fs (file system) moduli fayllar bilan ishlash uchun kerakli vositalarni taqdim etadi. Bu modul orqali fayl va kataloglarni yaratish, o‘qish, tahrirlash, o‘chirish va boshqa operatsiyalarni amalga oshirish mumkin.

fs moduli haqida umumiy tushuncha

  fs moduli bilan quyidagi asosiy vazifalarni bajarish mumkin:

    - Fayllarni o‘qish va yozish
    - Yangi fayl yoki katalog yaratish
    - Fayl/katalogni o‘chirish yoki nomini o‘zgartirish
    - Fayl va kataloglar haqida ma'lumot olish

  Quyidagi usullarda fs moduli bilan ishlash mumkin:

    - Asinxron (non-blocking): Kod boshqa vazifalarni bajarishda davom etadi.
    - Sinxron (blocking): Kod bajarilishi to‘xtab turadi va natijani kutadi.

  fs modulidan foydalanish

  Birinchi navbatda fs modulini import qilish kerak:

    const fs = require('fs');

  Fayllar bilan ishlash misollari

  1. Faylni o‘qish – fs.readFile

    fs.readFile('example.txt', 'utf8', (err, data) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Fayl tarkibi:', data);
    });

    - utf8: Faylni UTF-8 formatida o‘qish uchun.
    - Agar xato bo‘lsa, err obyekti qaytadi.

  2. Faylga yozish – fs.writeFile

    fs.writeFile('example.txt', 'Salom, Node.js!', (err) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Yozildi!');
    });


  3. Faylni qo‘shib yozish – fs.appendFile

    fs.appendFile('example.txt', '\nQo‘shimcha maʼlumot.', (err) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Fayl yangilandi!');
    });

  4. Faylni o‘chirish – fs.unlink

    fs.unlink('example.txt', (err) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Fayl o‘chirildi!');
    });



  Kataloglar bilan ishlash

  1. Yangi katalog yaratish – fs.mkdir

    fs.mkdir('yangi-katalog', { recursive: true }, (err) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Katalog yaratildi!');
    });


  2. Katalogni o‘qish – fs.readdir

    fs.readdir('.', (err, files) => {
      if (err) {
        console.error('Xato:', err);
        return;
      }
      console.log('Fayllar:', files);
    });



  Sinxron usullar misoli

  Agar sinxron ishlash kerak bo‘lsa, readFileSync yoki writeFileSync kabi usullardan foydalaniladi.

  Faylni sinxron o‘qish:

    const data = fs.readFileSync('example.txt', 'utf8');
    console.log('Sinxron o‘qish:', data);


  Faylga sinxron yozish:

    fs.writeFileSync('example.txt', 'Bu sinxron yozish misoli.');
    console.log('Fayl sinxron yozildi.');

  
  Xulosa
  
    Node.js'ning fs moduli yordamida fayl va kataloglar ustida turli xil operatsiyalarni bajarish mumkin. Asinxron usullar afzalroq, chunki ular kodning samaradorligini oshiradi va bloklanishiga yo‘l qo‘ymaydi. Sinxron usullar esa oddiy skriptlarda yoki bloklash muammo bo‘lmagan hollarda ishlatiladi.




#9-dars. Module Operation System. OS.

Node.js’dagi os (Operating System) moduli operatsion tizim bilan bog‘liq ma'lumotlar va funksiyalarni olishga yordam beradi. Ushbu modul yordamida siz dasturingizni turli platformalarda samarali ishlashi uchun moslashingiz yoki tizim resurslarini kuzatishingiz mumkin.

os modulining vazifasi

  - Operatsion tizim va uning xususiyatlari haqida ma'lumot olish.
  - CPU, RAM va boshqa tizim resurslari haqida ma'lumot taqdim etish.
  - Xost nomi, foydalanuvchi katalogi kabi tizim parametrlarini aniqlash.

os modulini import qilish

  const os = require('os');

os modulining asosiy funksiyalari

  1. Tizimning platformasini aniqlash – os.platform()

    console.log(os.platform()); // 'linux', 'win32', 'darwin' va hokazo

  Bu funksiya qaysi operatsion tizimda kod ishga tushirilganini aniqlashga yordam beradi.

  2. Tizim arxitekturasi – os.arch()

    console.log(os.arch()); // 'x64', 'arm', 'ia32' va boshqalar

  Bu funksiya tizimning protsessor arxitekturasini qaytaradi.

  3. Bo‘sh va umumiy RAM miqdori – os.freemem() va os.totalmem()

    console.log(`Bo'sh RAM: ${os.freemem()} bayt`);
    console.log(`Jami RAM: ${os.totalmem()} bayt`);

  Bu funksiyalar RAM resurslaridan qancha foydalanilganini kuzatish uchun ishlatiladi.

  4. Tizim ishga tushgan vaqtdan beri o‘tgan vaqt – os.uptime()

    console.log(`Tizim ishlayotgan vaqt: ${os.uptime()} soniya`);

  Bu funksiya operatsion tizim qayta yuklanganidan keyin qancha vaqt o‘tganini soniyalarda ko‘rsatadi.

  5. Tizimning xost nomini olish – os.hostname()

    console.log(os.hostname());

  Bu funksiya qurilmaning xost nomini qaytaradi.

  6. CPU yadrolari haqida ma'lumot – os.cpus()

    console.log(os.cpus());

  Bu funksiya tizimdagi har bir CPU yadrosi haqida batafsil ma'lumot qaytaradi.

  7. Foydalanuvchi katalogini olish – os.homedir()

    console.log(os.homedir());

  Bu funksiya joriy foydalanuvchining asosiy katalogini qaytaradi.

  8. Tizimdagi vaqtinchalik fayllar katalogi – os.tmpdir()

    console.log(os.tmpdir());

  Bu funksiya vaqtinchalik fayllar uchun katalog manzilini qaytaradi.

  9. Tizim tarmoq interfeyslari – os.networkInterfaces()

    console.log(os.networkInterfaces());

  Bu funksiya qurilmadagi barcha tarmoq interfeyslari haqida ma'lumot beradi.



  Amaliy misol: Tizim haqida qisqacha hisobot

    const os = require('os');

    console.log(`Platforma: ${os.platform()}`);
    console.log(`Arxitektura: ${os.arch()}`);
    console.log(`Xost nomi: ${os.hostname()}`);
    console.log(`Bo'sh RAM: ${(os.freemem() / 1024 / 1024).toFixed(2)} MB`);
    console.log(`Jami RAM: ${(os.totalmem() / 1024 / 1024).toFixed(2)} MB`);
    console.log(`Uptime: ${(os.uptime() / 60).toFixed(2)} daqiqa`);
    console.log('CPUlar:', os.cpus());


    Xulosa

      Node.js’dagi os moduli yordamida operatsion tizim bilan bog‘liq ko‘p turdagi ma'lumotlarni olish va resurslarni kuzatish mumkin. Bu, ayniqsa, monitoring, diagnostika, yoki platformaga moslashuvchan dasturlar yaratishda muhim hisoblanadi.




#10-dars. Module Events.

Node.js’dagi events moduli asinxron va voqealar (event) bilan bog‘liq dasturlar yaratish uchun ishlatiladi. Voqea moduli yordamida siz biror hodisani kuzatib, ushbu hodisa sodir bo‘lganda tegishli harakatlarni amalga oshirishingiz mumkin. Bu Event-Driven Programming (voqeaga asoslangan dasturlash) tamoyiliga asoslangan.


Nima uchun events moduli kerak?

  Node.js asinxron muhitda ishlaydi, ya'ni ko‘plab jarayonlar fon rejimida davom etadi. events moduli yordamida:

    - Voqea sodir bo‘lishi bilan ma'lum kodni ishga tushirish mumkin.

    - Serverlar, strimlar va socketlar bilan ishlashda kerakli javoblarni qayta ishlash uchun ishlatiladi.

    - Event emitters (hodisa chiqaruvchi) orqali hodisalarni chiqarish va listeners (kuzatuvchilar) orqali ularni qayta ishlash mumkin.


    events modulidan foydalanish

    1. Modulni import qilish

      const EventEmitter = require('events');

    Node.js'dagi events moduli EventEmitter klassini taqdim etadi, va bu orqali voqealar bilan ishlashni tashkil qilamiz.


    Asosiy tushunchalar

      - EventEmitter: Voqealarni chiqarish va ularga javob qaytarish uchun ishlatiladi.

      - emit(): Voqeani chiqaradi.

      - on(): Voqeani kuzatib, sodir bo‘lganida bajariladigan funksiyani tayinlaydi.

      - once(): Voqea sodir bo‘lganida faqat bir marta ishlatiladi.


  Misollar bilan tushuntirish

  1. Oddiy voqea chiqarish va kuzatish

      const EventEmitter = require('events');

      // Yangi hodisa chiqaruvchi obyekt yaratamiz
      const eventEmitter = new EventEmitter();

      // Voqeani kuzatib, funksiyani tayinlaymiz
      eventEmitter.on('salom', () => {
        console.log('Salom berildi!');
      });

      // 'salom' voqeasini chiqaramiz
      eventEmitter.emit('salom');

    Natija:

      Salom berildi!

  Tushuntirish:

   - eventEmitter.on() yordamida salom hodisasini kuzatdik.

    - eventEmitter.emit() orqali o‘sha voqeani chiqarib, unga bog‘langan funksiyani ishga tushirdik.


  2. Hodisaga parametr yuborish

    eventEmitter.on('yangiFoydalanuvchi', (ism, yosh) => {
      console.log(`Yangi foydalanuvchi: ${ism}, Yoshi: ${yosh}`);
    });

    eventEmitter.emit('yangiFoydalanuvchi', 'Alisher', 25);


    Natija:

      Yangi foydalanuvchi: Alisher, Yoshi: 25


    Tushuntirish:

      - Voqeaga parametrlar uzatish mumkin. Bu yerda biz foydalanuvchining ismi va yoshini parametr sifatida uzatdik.


  3. once() bilan bir marta ishlaydigan hodisa

    eventEmitter.once('birMarta', () => {
      console.log('Bu hodisa faqat bir marta ishlaydi.');
    });

    eventEmitter.emit('birMarta');
    eventEmitter.emit('birMarta');

    Natija: 

      Bu hodisa faqat bir marta ishlaydi.


  Tushuntirish:

    - once() hodisani faqat bir marta bajaradi, keyingi chaqiruvlar e'tiborsiz qoldiriladi.


  4. Hodisalarni o‘chirish

    Kuzatuvchi funksiyani o‘chirish uchun off() yoki removeListener() ishlatiladi:

    const funksiya = () => {
      console.log('Bu funksiya endi o‘chiriladi.');
    };

    // Voqeani kuzatish
    eventEmitter.on('test', funksiya);

    // Voqeani chiqarish
    eventEmitter.emit('test');

    // Kuzatuvchini o‘chirish
    eventEmitter.off('test', funksiya);

    // Yana voqeani chiqarish (endi ishlamaydi)
    eventEmitter.emit('test');


  Natija:

    Bu funksiya endi o‘chiriladi.


  Tushuntirish:

    - off() yordamida kuzatuvchini o‘chirdik, shuning uchun ikkinchi marta hodisa chiqarilganda hech qanday narsa sodir bo‘lmadi.

  5. eventEmitter dan meros olish

  Agar siz o‘z klassingizni yaratmoqchi bo‘lsangiz, EventEmitter dan meros olish orqali hodisalar bilan ishlashni qo‘shishingiz mumkin.

  const EventEmitter = require('events');

    class MeningClassim extends EventEmitter {
      yangiVazifa(nomi) {
        console.log(`Yangi vazifa qo‘shildi: ${nomi}`);
        this.emit('vazifa', nomi);
      }
    }

    const obj = new MeningClassim();

    obj.on('vazifa', (nomi) => {
      console.log(`Vazifa bajarildi: ${nomi}`);
    });

    obj.yangiVazifa('Node.js o‘rganish');


  Natija:

    Yangi vazifa qo‘shildi: Node.js o‘rganish
    Vazifa bajarildi: Node.js o‘rganish


  Xulosa

    events moduli Node.js'ning asosiy modullaridan biri bo‘lib, asinxron dasturlar yaratishda katta ahamiyatga ega. U yordamida:

      - Hodisalarni chiqarish va ularga javob beruvchi funksiyalarni tayinlash mumkin.

      - once() yordamida faqat bir marta bajariladigan hodisalar yaratish mumkin.

      - Klasslarga hodisa chiqarish imkonini berish orqali murakkab tizimlar quriladi.

    Bu modul server hodisalarini boshqarish, real-vaqt dasturlash, va strimlar bilan ishlashda juda foydali hisoblanadi.  


#11-dars. Module HTTP.

Node.js-da http moduli HTTP serverlar va mijozlar yaratishga yordam beradi. Ushbu modulni ishlatib, veb-server yaratish va HTTP so‘rovlariga javob qaytarishni amalga oshirish mumkin. Quyida http modulining asosiy funksiyalari va qanday ishlatilishi haqida ma'lumot beraman.

1. http modulini import qilish

  const http = require('http');

2. Oddiy HTTP server yaratish

  Quyidagi misolda oddiy HTTP server yaratilgan va u mijozning so‘roviga "Hello, World!" javobini qaytaradi.

    const http = require('http');

    // Server yaratish
    const server = http.createServer((req, res) => {
      // Javob sarlavhasini o‘rnatish
      res.statusCode = 200;  // Muvaffaqiyatli javob kodi
      res.setHeader('Content-Type', 'text/plain');  // Javob tipi

      // Javob berish
      res.end('Hello, World!\n');
    });

    // Serverni 3000-portda ishga tushirish
    server.listen(3000, '127.0.0.1', () => {
      console.log('Server 127.0.0.1:3000 da ishga tushdi');
    });

  
  Tushuntirish:

    - http.createServer() – HTTP server yaratadi.

    - req (request) – Mijozdan kelgan so‘rov obyekti.
    
    - res (response) – Javob yuborish uchun obyekt.
    
    - res.end() – Javobni yakunlash uchun ishlatiladi.


  3. So‘rov va javob obyektlari (req va res)

  req va res obyektlari server va mijoz o‘rtasida aloqa qilish uchun ishlatiladi.

  req obyekti (mijozdan kelgan ma'lumot):

    - req.url – So‘rov qilingan URL.

    - req.method – So‘rov turi (GET, POST, va h.k.).

    - req.headers – So‘rov sarlavhalari (headers).

  res obyekti (javob uchun):

    - res.setHeader(name, value) – Javob sarlavhasini o‘rnatish.

    - res.write(data) – Javobga ma'lumot qo‘shish.
    
    - res.end(data) – Javobni yakunlash.


  4. URL bo‘yicha marshrutlash (Routing)

  Turli URL manzillariga turli xil javoblar qaytarish uchun marshrutlashdan foydalanish mumkin:

    const http = require('http');

    const server = http.createServer((req, res) => {
      res.setHeader('Content-Type', 'text/plain');

      if (req.url === '/') {
        res.end('Bosh sahifa');
      } else if (req.url === '/about') {
        res.end('Biz haqimizda');
      } else {
        res.statusCode = 404;
        res.end('Sahifa topilmadi');
      }
    });

    server.listen(3000, () => {
      console.log('Server 3000-portda ishlayapti');
    });


  5. POST so‘rovlarini qayta ishlash

  POST so‘rovlaridan ma'lumot olish uchun so‘rov obyektidan oqim (stream) sifatida foydalaniladi:

    const http = require('http');

    const server = http.createServer((req, res) => {
      if (req.method === 'POST') {
        let body = '';

        req.on('data', (chunk) => {
          body += chunk.toString();
        });

        req.on('end', () => {
          res.end(`Qabul qilindi: ${body}`);
        });
      } else {
        res.statusCode = 405;
        res.end('Faqat POST so‘rovlari qabul qilinadi');
      }
    });

    server.listen(3000, () => {
      console.log('Server 3000-portda ishlayapti');
    });


  6. HTTP so‘rov yuborish (mijoz)

  Node.js orqali boshqa serverga HTTP so‘rov yuborish uchun ham http modulidan foydalanish mumkin:

    const http = require('http');

    // GET so‘rov yuborish
    http.get('http://jsonplaceholder.typicode.com/todos/1', (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        console.log('Ma\'lumot:', JSON.parse(data));
      });
    }).on('error', (err) => {
      console.error('Xato:', err.message);
    });

  7. HTTPS bilan ishlash

  Agar HTTPS server yaratish kerak bo‘lsa, https modulidan foydalaniladi. U HTTP bilan bir xil ishlaydi, ammo xavfsizlik uchun sertifikat talab qiladi.

  Xulosa

    Node.js http moduli yordamida oddiy va moslashuvchan HTTP server yaratish mumkin. Bu modulni tushunib olish server taraf dasturlashni o‘rganish uchun muhim qadam hisoblanadi. Har xil turdagi so‘rovlar va marshrutlashlar bilan ishlash orqali yanada murakkab veb-ilovalar tuzish mumkin bo‘ladi.



#12-dars. Nodemon.

Nodemon haqida ma'lumot

  nodemon — Node.js dasturlari uchun avtomatik qayta yuklovchi vosita. U Node.js serveri yoki ilovasi kodida o‘zgarishlar bo‘lganda, avtomatik ravishda qayta ishga tushadi. Bu vosita ishlab chiqish jarayonida juda qulay, chunki har safar o‘zgarishlardan keyin qo‘lda serverni qayta ishga tushirishga hojat qolmaydi.

Nodemon o‘rnatilishi

  nodemon-ni o‘rnatish uchun npm (Node Package Manager) dan foydalaniladi:

  Global o‘rnatish:

    npm install -g nodemon

  Bu usulda nodemon-ni har qanday loyiha ichida buyruqlar qatoridan foydalanish mumkin bo‘ladi.

  Loyihaga lokal o‘rnatish:

    npm install --save-dev nodemon

  Bu loyiha ichida devDependency sifatida qo‘shiladi.


  Nodemon yordamida dasturni ishga tushirish

  Agar sizda app.js nomli Node.js fayl bo‘lsa, uni nodemon bilan quyidagicha ishga tushirasiz:

  nodemon app.js

  Dastur faylida har qanday o‘zgarish qilganda, nodemon avtomatik ravishda serverni qayta ishga tushiradi.



  Nodemon-ni package.json orqali sozlash

  Loyihaga nodemon qo‘shilgandan so‘ng, package.json faylida skript sifatida qo‘shish qulay:

    {
      "scripts": {
        "start": "node app.js",
        "dev": "nodemon app.js"
      }
    }

  Endi serverni quyidagi buyruq bilan ishga tushirish mumkin:

    npm run dev

  Maxsus fayllarni kuzatish yoki e'tiborsiz qoldirish

    Ma'lum fayllarni yoki kataloglarni kuzatish:

      --watch opsiyasi orqali qaysi kataloglarni kuzatishni belgilashingiz mumkin:

        nodemon --watch src app.js

      Bu misolda faqat src katalogidagi o‘zgarishlar kuzatiladi.

    
    Fayllarni e'tiborsiz qoldirish:

      Agar ba'zi fayllar yoki kataloglarni kuzatishni xohlamasangiz, .nodemon.json fayli orqali sozlashingiz mumkin:

        .nodemon.json fayli:

          {
            "ignore": ["logs/*", "public/*"]
          }

        Bu sozlama bilan logs va public kataloglaridagi fayllar kuzatilmaydi.

        
    Maxsus fayl kengaytmalari bilan ishlash

      Agar .js dan tashqari boshqa fayllarni (masalan, .ts yoki .json) kuzatmoqchi bo‘lsangiz:

        nodemon --ext js,json,ts app.js

      Bu yerda .js, .json va .ts fayllardagi o‘zgarishlar kuzatiladi.


    Kesh tozalash va serverni ishga tushirishdan oldin bajariladigan buyruqlar

      --exec opsiyasi yordamida nodemon bajarishi kerak bo‘lgan buyruqni aniqlash mumkin. Masalan, TypeScript fayllarni ts-node orqali ishga tushirish:

        nodemon --exec ts-node app.ts

    Nodemon foydalari

      - Ishlab chiqish jarayonini tezlashtiradi, chunki har safar qo‘lda qayta ishga tushirishga hojat yo‘q.
      - Avtomatik qayta yuklash orqali real vaqt rejimida o‘zgarishlarni sinab ko‘rish imkonini beradi.
      - Turli fayllarni kuzatish va sozlash imkoniyati mavjud.

    Xulosa

      nodemon — ishlab chiqish jarayonida Node.js ilovalari bilan ishlashni sezilarli darajada qulaylashtiradigan vosita. Avtomatik qayta yuklash tufayli vaqt va kuch tejaydi, ayniqsa kodda ko‘p o‘zgarishlar qilinadigan paytlarda foydali bo‘ladi.



#13-dars. Web-Server.


Web-server haqida tushuncha

  Web-server — bu mijozlarning (foydalanuvchilar yoki dasturlar) so‘rovlarini qabul qilib, ularga tegishli javoblarni qaytaruvchi dastur yoki qurilma. U asosan veb-sahifalar, rasmlar, fayllar yoki boshqa resurslarni mijozlarga HTTP/HTTPS protokoli orqali taqdim etadi.


Web-serverning vazifalari

  1. HTTP so‘rovlarini qabul qilish: Brauzer yoki boshqa mijoz ilovalari tomonidan yuborilgan so‘rovlarni oladi.

  2. So‘rovga javob qaytarish: Mos keladigan veb-sahifa yoki resursni mijozga yuboradi (masalan, HTML, CSS, JavaScript yoki rasm).

  3. Statik va dinamik kontentni taqdim etish:

      Statik kontent: Fayllar to‘g‘ridan-to‘g‘ri diskdan yuboriladi (HTML, CSS, rasmlar).

      Dinamik kontent: Ma'lumotlar serverda dastur orqali (masalan, Node.js, PHP) ishlab chiqilib yuboriladi.

  4. Protokol qoidalariga rioya qilish: HTTP, HTTPS kabi protokollardan foydalanib, xavfsiz aloqa o‘rnatadi.

  5. Marshrutlash: Mijozlardan kelgan URL so‘rovini tegishli sahifaga yoki manbaga yo‘naltiradi.


Web-server turlari

  1. Statik web-server:

    Bunday serverlar faqat oldindan tayyorlangan fayllarni taqdim etadi.
    Misol: HTML fayllarni yuklab beradigan Apache yoki Nginx serverlari.

  2. Dinamik web-server:

      Dinamik serverlar so‘rovga qarab, har safar yangi kontentni ishlab chiqaradi.
      Misol: Node.js yoki PHP serverlari foydalanuvchiga mos ma'lumotlar yaratib yuboradi (masalan, foydalanuvchi profil sahifasi).


Mashhur web-server dasturlari

  1. Apache HTTP Server

      Ochiq kodli.
      Statik va dinamik kontent bilan ishlay oladi.
      Ko‘p platformali (Windows, Linux, macOS).

  2. Nginx

      Katta yuklamalarni ko‘tara oladi.
      Tezkor va samarali.
      Ko‘pincha yuk taqsimlash (load balancing) va keshlash uchun ishlatiladi.

  3. Node.js

      JavaScript asosida ishlaydigan server muhiti.
      Asinxron va tezkor ishlashga mo‘ljallangan.
      Dinamik kontent uchun mos.

  4. IIS (Internet Information Services)

      Microsoft tomonidan yaratilgan.
      Windows serverlari bilan mos.


Node.js orqali oddiy web-server yaratish

  Node.js yordamida minimal veb-server yaratish juda oddiy:

    const http = require('http');

    // Serverni yaratish
    const server = http.createServer((req, res) => {
      res.statusCode = 200;
      res.setHeader('Content-Type', 'text/plain');
      res.end('Salom, bu Node.js serveri!');
    });

    // Serverni 3000-portda ishga tushirish
    server.listen(3000, () => {
      console.log('Server 3000-portda ishlayapti');
    });


Web-server qanday ishlaydi?

  1. Mijoz (browser): Brauzer serverga HTTP yoki HTTPS so‘rov yuboradi. Masalan, https://example.com manzilini kiritganda so‘rov jo‘natiladi.

  2. DNS: Mijoz domen nomini IP manzilga o‘giradi va server bilan bog‘lanadi.

  3. Server javobi: Web-server mijozdan kelgan URL so‘rovini tekshiradi va mos sahifani qaytaradi (masalan, index.html).

  4. Brauzer: Olingan javob asosida sahifani ko‘rsatadi.


HTTP protokoli va status kodlar

  Web-server HTTP yoki HTTPS protokollari yordamida so‘rov va javoblar bilan ishlaydi. Javobda status kodi ham jo‘natiladi:

    - 200 OK: So‘rov muvaffaqiyatli bajarildi.
    - 404 Not Found: So‘ralgan sahifa topilmadi.
    - 500 Internal Server Error: Serverda xatolik yuz berdi.

  
Xulosa

  Web-serverlar internetdagi asosiy infratuzilmaning ajralmas qismidir. Ular mijozlarning so‘rovlariga tez va to‘g‘ri javob qaytarib, foydalanuvchilarga kerakli ma'lumotlarni yetkazib beradi. Apache, Nginx va Node.js kabi web-serverlar veb-saytlarni ishlatishda va ularga xizmat ko‘rsatishda katta ahamiyatga ega.


#14-dars. HTML bilan ishlash.



#15-dars. API



#16-dars. CLI

CLI (Command Line Interface) — bu kompyuter dasturlarini buyruqlar orqali boshqarish uchun foydalaniladigan interfeys.

Node.js da CLI

  Node.js yordamida biz CLI ilovalarini yaratishimiz mumkin. Bu ilovalar terminal yoki buyruq qatoridan ishga tushiriladi va foydalanuvchi bilan matn ko‘rinishida o‘zaro aloqada bo‘ladi.

  CLI ilovalari quyidagi maqsadlarda ishlatiladi:

    - Dastur avtomatlashtirish.
    - Asboblar va skriptlar yaratish (masalan, paketlarni boshqarish yoki kod generatori).
    - Shablon asosida loyihalar yaratish (masalan, create-react-app yoki vite).


  CLI yaratishda foydali kutubxonalar:

    - yargs: Buyruq va parametrlarni boshqarish uchun qulay.
    - commander: Katta CLI ilovalari uchun qulay boshqaruv va opsiya interfeysi.
    - inquirer: Interaktiv savollar bilan ishlash uchun.

  Shunday qilib, Node.js yordamida CLI ilovalarini yaratib, ish jarayonini avtomatlashtirishingiz yoki boshqa foydalanuvchilar uchun foydali vositalar yaratishingiz mumkin.



#17-dars. Demo Project


#18-dars. Log arguments


#19-dars. Xabarni chop etish

chalk - library
dedent-js - library


#chalk - library

  chalk — bu JavaScript kutubxonasi bo‘lib, matnlarni terminalda rangli qilib chiqarish uchun ishlatiladi. Bu asosan Node.js bilan ishlaydi va terminal interfeyslari uchun ko‘p foydalaniladi. U yordamida matn rangini, fondini va uslubini (bold, underline, inverse) osongina sozlash mumkin.

  O'rnatish

    npm install chalk


  Asosiy foydalanish
  Quyida oddiy misol bilan tanishamiz:

    import chalk from 'chalk'; // ESM formatda import

    console.log(chalk.green('Salom, dunyo!')); // Matn yashil rangda
    console.log(chalk.blue.bold('Bu bold va ko‘k rangda')); // Bold va ko‘k matn
    console.log(chalk.bgRed('Fon qizil!')); // Qizil fon
    console.log(chalk.yellow.underline('Sariq va ostiga chizilgan')); // Sariq va chiziqli

  Chain (zanjir) qilish imkoniyati
  chalk uslublarni zanjir tarzida birlashtirishga ham imkon beradi:

    console.log(chalk.blue.bgYellow.bold('Zanjirlangan uslublar!'));

  O‘zgacha ranglarni qo‘llash
  RGB yoki HEX rang kodlarini ham ishlatishingiz mumkin:

    console.log(chalk.hex('#DEADED')('Bu rang HEX formatda'));
    console.log(chalk.rgb(255, 100, 0)('RGB formatda rang berildi!'));

  Yana qiziqarli imkoniyatlar
  chalk yordamida turli rang va uslubda bir necha qismlarni birlashtirish ham oson:

    console.log(
      chalk.red('Qizil ') + 
      chalk.green('Yashil ') + 
      chalk.blue('Ko‘k!')
    );

  Qo‘llab-quvvatlanadigan uslublar

    - Ranglar: red, green, blue, yellow, cyan, magenta, white, gray, va boshqalar.
    - Fon ranglari: bgRed, bgGreen, bgYellow va h.k.
    - Uslublar: bold, dim, italic, underline, inverse, strikethrough.

  
  Foydali ma'lumotlar

    chalk boshqa shunga o‘xshash kutubxonalarga qaraganda juda tezkor va foydalanishga oson. Yangi versiyalarda u ESM formatni qo‘llab-quvvatlaydi, shuning uchun agar eski require usuli bilan foydalanish kerak bo‘lsa, shunday yozish kerak:

      const chalk = require('chalk');

    Xulosa: chalk matnlarni estetik jihatdan chiroyli va ko‘rinadigan qilib chiqarish uchun juda qulay va tezkor kutubxona hisoblanadi.



#dedent-js

dedent-js — bu JavaScript kutubxonasi bo‘lib, ko‘p qatorli matnlardan ortiqcha bo‘shliqlar va chekinmalarni olib tashlash uchun ishlatiladi. Ko‘pincha templatelar yoki multiline string bilan ishlaganda, kodni toza va tartibli saqlashda foyda beradi.


  O‘rnatish

    npm install dedent


  Agar ES-modul bilan ishlayotgan bo‘lsangiz, quyidagicha import qilishingiz mumkin:

    import dedent from 'dedent';

  Yoki require bilan:

    const dedent = require('dedent');



  Asosiy foydalanish

    dedent kutubxonasi yordamida bir nechta qatorli matnlarni bo‘sh joylardan tozalash mumkin:

    Misol

      import dedent from 'dedent';

      const matn = dedent(`
          Ushbu matn bir nechta qatorlardan iborat.
            Har bir qator boshida ortiqcha bo‘sh joylar mavjud.
          dedent bu bo‘shliqlarni olib tashlaydi.
      `);

      console.log(matn);



  Qachon va nima uchun kerak?
    
    Ko‘p qatorli template literallardan foydalanganda ba'zan kodda chekinish (indentation) tartibini saqlash kerak bo‘ladi. Ammo bu, matnni terminal yoki faylga chiqarishda kutilmagan bo‘sh joylar paydo bo‘lishiga olib keladi. dedent buni to‘g‘rilaydi va matnni to‘g‘ri formatda beradi.

  

  Afzalliklari

    - Kodni tartibli saqlaydi: Kod va matnni chiroyli ko‘rinishda yozish bilan birga ortiqcha bo‘shliqlardan xalos bo‘lasiz.
    - Yengillik: Juda yengil va tezkor kutubxona.
    - Qo‘llash oson: Har qanday qatorli matn bilan ishlash imkonini beradi.


  dedent-js — bu sodda va qulay kutubxona bo‘lib, matnlarni formatlashda tezkor yordam beradi. Bu ayniqsa React, Node.js, yoki ko‘p qatorli stringlardan foydalaniladigan loyihalarda qo‘l keladi.